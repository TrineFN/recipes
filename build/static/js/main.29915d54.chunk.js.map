{"version":3,"sources":["model.ts","RecipeDetails.tsx","MealPlan.tsx","RecipeList.tsx","ShoppingList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStore","create","devtools","set","recipes","data","mealPlan","addRecipeToMealPlan","recipe","state","removeRecipeFromMealPlan","filter","r","name","selectRecipe","recipeName","selectedRecipe","updateRecipe","map","selectShoppingItems","reduce","acc","curr","ingredients","forEach","i","amount","RecipeDetails","closeDetail","recipesOnMealPlan","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","Dialog","open","onClose","DialogTitle","IconButton","onClick","style","position","right","spacing","top","DialogContent","src","img","maxHeight","textAlign","FormControlLabel","value","control","Checkbox","color","label","labelPlacement","checked","includes","onChange","e","updateMealPlan","TextField","type","persons","Typography","variant","align","List","ListItem","ListItemText","primary","unit","instructions","idx","MealPlan","useState","setSelectedRecipe","padding","button","ListItemAvatar","Avatar","ListItemSecondaryAction","edge","aria-label","undefined","useStyles","makeStyles","tile","background","palette","grey","cursor","RecipeList","classes","mobile","GridList","GridListTile","id","cols","rows","className","GridListTileBar","title","actionIcon","stopPropagation","ShoppingList","setOpen","shoppingList","Object","entries","ListItemIcon","DialogActions","text","navigator","clipboard","writeText","toString","replaceAll","App","Grid","container","item","xs","sm","Container","Fab","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29915d54.chunk.js","sourcesContent":["import create from \"zustand\";\nimport data from \"./data.json\";\nimport { devtools } from 'zustand/middleware'\n\nexport interface Recipe {\n  name: string;\n  persons: number;\n  img: string;\n  ingredients: Array<Ingredient>;\n  instructions: Array<string>;\n}\n\nexport interface Ingredient {\n  name: string;\n  unit: string;\n  amount: number;\n}\n\nexport interface IngredientsList {\n  [item: string]: Ingredient;\n}\n\n\ninterface RootState {\n  selectedRecipe?: string;\n  recipes: Recipe[];\n  mealPlan: Recipe[];\n  addRecipeToMealPlan: (recipe: Recipe) => void;\n  removeRecipeFromMealPlan: (recipe: Recipe) => void;\n  selectRecipe: (recipeName: string) => void;\n  updateRecipe: (recipe: Recipe) => void;\n}\n\nexport const useStore = create<RootState>(devtools(set => ({\n  recipes: data.recipes,\n  mealPlan: [],\n  addRecipeToMealPlan: (recipe) => set(state => ({\n    mealPlan: [...state.mealPlan, recipe]\n  })),\n  removeRecipeFromMealPlan: (recipe) => set(state => ({\n    mealPlan: state.mealPlan.filter(r => r.name !== recipe.name)\n  })),\n  selectRecipe: (recipeName) => set({ selectedRecipe: recipeName }),\n  updateRecipe: (recipe) => set(state => ({ recipes: state.recipes.map(r => recipe.name === r.name ? recipe : r) }))\n})));\n\nexport const selectShoppingItems = (state: RootState) =>\n  state.mealPlan.reduce((acc: IngredientsList, curr) => {\n    curr.ingredients.forEach(i => {\n      if (acc[i.name]) {\n        acc[i.name].amount += i.amount;\n      } else {\n        acc[i.name] = { ...i };\n      }\n    })\n    return acc\n  }, {})","import { Typography, FormControlLabel, Checkbox, List, ListItem, ListItemText, Dialog, DialogTitle, DialogContent, useTheme, useMediaQuery, IconButton, TextField } from \"@material-ui/core\";\nimport { Recipe, useStore } from \"./model\";\nimport CloseIcon from '@material-ui/icons/Close';\n\ninterface Props {\n  recipe: Recipe;\n  closeDetail: () => void;\n}\n\nexport default function RecipeDetails({ recipe, closeDetail }: Props) {\n  const recipesOnMealPlan = useStore(state => state.mealPlan.map(r => r.name));\n  const addRecipeToMealPlan = useStore(state => state.addRecipeToMealPlan);\n  const removeRecipeFromMealPlan = useStore(state => state.removeRecipeFromMealPlan);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const updateMealPlan = (e: React.ChangeEvent<{}>, checked: Boolean) => {\n    if (checked) {\n      addRecipeToMealPlan(recipe);\n    } else {\n      removeRecipeFromMealPlan(recipe);\n    }\n  }\n  return (\n    <Dialog open fullScreen={fullScreen} onClose={closeDetail}>\n      <DialogTitle>\n        {recipe.name}\n\n        <IconButton onClick={closeDetail} style={{ position: \"absolute\", right: theme.spacing(1), top: theme.spacing(1) }}>\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent>\n        <img src={recipe.img} style={{ maxHeight: \"300px\" }} />\n        <div style={{ textAlign: \"left\" }}>\n          <FormControlLabel\n            value={recipe.name}\n            control={<Checkbox color=\"primary\" />}\n            label=\"Add to shopping list\"\n            labelPlacement=\"end\"\n            checked={recipesOnMealPlan.includes(recipe.name)}\n            onChange={(e, checked) => updateMealPlan(e, checked)}\n          />\n        </div>\n        Persons:<TextField type=\"number\"> {recipe.persons}</TextField>\n        <Typography variant=\"subtitle1\" align='left'>Ingredients:</Typography>\n        <List>\n          {recipe.ingredients.map(i => (\n            <ListItem key={i.name}>\n              <ListItemText\n                primary={`${i.amount} ${i.unit} ${i.name}`}\n              />\n            </ListItem>\n          ))}\n        </List>\n        <Typography variant=\"subtitle1\" align='left'>Intructions:</Typography>\n        <List>\n          {recipe.instructions.map((i, idx) => (\n            <ListItem key={idx}>\n              <ListItemText\n                primary={`Step ${idx + 1}: ${i}`}\n              />\n            </ListItem>\n          ))}\n        </List>\n      </DialogContent>\n    </Dialog>\n  )\n}","import { IconButton, Typography } from \"@material-ui/core\";\nimport { Avatar, List, ListItem, ListItemAvatar, ListItemText, ListItemSecondaryAction } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport { Recipe, useStore } from \"./model\";\nimport RecipeDetails from \"./RecipeDetails\";\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nexport default function MealPlan() {\n    const recipesOnMealPlan = useStore(state => state.mealPlan);\n    const [selectedRecipe, setSelectedRecipe] = useState<Recipe | undefined>();\n    const removeRecipeFromMealPlan = useStore(state => state.removeRecipeFromMealPlan);\n\n    const closeRecipeDetail = () => {\n        setSelectedRecipe(undefined);\n    }\n\n    return (\n        <>\n            <Typography variant=\"h5\" style={{ padding: \"16px\" }}>Meal Plan</Typography>\n            <List>\n                {recipesOnMealPlan.map(r =>\n                    <ListItem button onClick={() => setSelectedRecipe(r)} key={r.name}>\n                        <ListItemAvatar>\n                            <Avatar variant=\"square\" src={r.img} />\n                        </ListItemAvatar>\n                        <ListItemText primary={r.name} />\n                        <ListItemSecondaryAction>\n                            <IconButton edge=\"end\" aria-label=\"remove recipe\" onClick={() => removeRecipeFromMealPlan(r)}>\n                                <DeleteIcon />\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                )}\n            </List>\n            {selectedRecipe && <RecipeDetails recipe={selectedRecipe} closeDetail={closeRecipeDetail} />}\n        </>)\n}","import { GridList, GridListTile, GridListTileBar, IconButton, makeStyles, useMediaQuery, useTheme } from \"@material-ui/core\";\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport { Recipe, useStore } from \"./model\";\nimport RecipeDetails from \"./RecipeDetails\";\nimport { useState } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  tile: {\n    '&:hover': {\n      background: theme.palette.grey[500],\n      cursor: \"pointer\",\n    }\n  },\n}));\n\nexport default function RecipeList() {\n  const recipesOnMealPlan = useStore(state => state.mealPlan.map(r => r.name));\n  const recipes = useStore(state => state.recipes);\n  const addRecipeToMealPlan = useStore(state => state.addRecipeToMealPlan);\n  const removeRecipeFromMealPlan = useStore(state => state.removeRecipeFromMealPlan);\n  const classes = useStyles();\n  const theme = useTheme();\n  const mobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const [selectedRecipe, setSelectedRecipe] = useState<Recipe | undefined>();\n\n  const closeRecipeDetail = () => {\n    setSelectedRecipe(undefined);\n  }\n  const updateMealPlan = (recipe: Recipe) => {\n    if (recipesOnMealPlan.includes(recipe.name)) {\n      removeRecipeFromMealPlan(recipe);\n    } else {\n      addRecipeToMealPlan(recipe);\n    }\n  }\n  return (\n    <>\n      <GridList>\n        {recipes.map(r => (\n          <GridListTile\n            key={r.name}\n            id={r.name}\n            cols={1}\n            rows={mobile ? 1 : 2}\n            className={classes.tile}\n            onClick={() => setSelectedRecipe(r)}\n          >\n            <img src={r.img} />\n            <GridListTileBar\n              title={r.name}\n              actionIcon={\n                <IconButton onClick={e => {\n                  e.stopPropagation();\n                  updateMealPlan(r);\n                }}\n                  color=\"secondary\"\n                >\n                  {recipesOnMealPlan.includes(r.name) ? <CheckBoxIcon /> : <CheckBoxOutlineBlankIcon />}\n                </IconButton>\n              }\n            />\n          </GridListTile>\n        ))}\n      </GridList>\n      {selectedRecipe && <RecipeDetails recipe={selectedRecipe} closeDetail={closeRecipeDetail} />}\n    </>\n  )\n}","import { Dialog, List, ListItem, DialogContent, DialogTitle, ListItemIcon, Checkbox, ListItemText, useMediaQuery, useTheme, IconButton } from \"@material-ui/core\";\nimport { Dispatch, SetStateAction } from \"react\";\nimport { selectShoppingItems, useStore } from \"./model\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport { DialogActions } from \"@material-ui/core\";\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\ninterface Props {\n  open: boolean;\n  setOpen: Dispatch<SetStateAction<boolean>>;\n}\n\nexport default function ShoppingList({ open, setOpen }: Props) {\n  const shoppingList = useStore(selectShoppingItems);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n  const copyToClipBoard = () => {\n    const text = Object.entries(shoppingList).map(([_, i]) => `- ${i.name}: ${i.amount} ${i.unit}\\n`);\n    navigator.clipboard.writeText(text.toString().replaceAll(\",\", \"\"))\n  }\n\n  return (\n    <Dialog open={open} fullScreen={fullScreen} onClose={() => setOpen(false)}>\n      <DialogTitle>\n        Shopping List\n        <IconButton onClick={() => setOpen(false)} style={{ position: \"absolute\", right: theme.spacing(1), top: theme.spacing(1) }}>\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent>\n        <List>\n          {Object.entries(shoppingList).map(([_, i]) => (\n            <ListItem key={i.name}>\n              <ListItemIcon>\n                <Checkbox\n                  edge=\"start\"\n                />\n              </ListItemIcon>\n              <ListItemText primary={`${i.name}: ${i.amount} ${i.unit}`} />\n            </ListItem>\n          ))}\n        </List>\n      </DialogContent>\n      <DialogActions>\n        <IconButton color=\"primary\" onClick={copyToClipBoard}>\n          <FileCopyIcon />\n        </IconButton>\n      </DialogActions>\n    </Dialog>\n  )\n}","import { Grid, Fab, Container } from \"@material-ui/core\";\nimport MealPlan from './MealPlan';\nimport RecipeList from './RecipeList';\nimport ShoppingBasketIcon from '@material-ui/icons/ShoppingBasket';\nimport { useState } from \"react\";\nimport ShoppingList from \"./ShoppingList\";\n\nfunction App() {\n  const [open, setOpen] = useState(false);\n  return (\n    <Grid container>\n      <Grid item xs={12} sm={4}>\n        <Container style={{ textAlign: \"center\", padding: \"16px\" }}>\n          <Fab color=\"primary\" onClick={() => setOpen(true)}><ShoppingBasketIcon /></Fab>\n        </Container>\n        <MealPlan />\n        <ShoppingList open={open} setOpen={setOpen} />\n      </Grid>\n      <Grid item xs={12} sm={8}>\n        <RecipeList />\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}